Write an HTML file that is a MIDI sequencer app.
When the page is opened, the URL is checked to see if it contains a config.
If it does, then the config is used to set up the sequencer.
If it does not, then the user is prompted to enter a config.
The config says what MIDI device names and channels to use for the synthesizers.
There are 4 different parts: bass, drum, keys, and lead.
After the config loads, there are media transport controls for previous, play, pause, stop, and next.
The previous and next buttons are disabled if there is no previous or next chart to play.
Each chart is a script that is loaded and sends MIDI messages.
The play button starts the chart.
The pause button pauses the chart.
The stop button stops the chart.
The previous button stops the chart goes to the previous chart.
The next button stops the chart goes to the next chart.
When a chart is loaded, the source code is displayed in a textarea.
The user can edit the source code for the chart and click a button to save the changes.
When the user saves the changes, the chart is reloaded with the new source code.
Include 3 charts: one that plays a middle c on the lead synth for 4 beats, one that plays a c major scale on the bass synth, and a simple blues song that uses all 4 parts.
Write a single HTML file that contains all of the styles and code for the app.

--------------------------------------------------------------------------------------------------------

New config idea:
Transporter:
    -Is MIDI checkbox
    -MIDI input/output selects
Band:
    -Checkbox for if there should be a textarea for the source code of the chart
    -4 parts: bass, drum, keys, lead
    -Each part has a controller and a synthesizer
        -Controller:
            -Is MIDI checkbox
            -MIDI input/output selects
        -Synthesizer:
            -Checkbox for if it is over MIDI or not
            -MIDI output select
            -MIDI channel input
Misc:
    -Checkbox to store the config in the URL

{
    showSourceCode: false,
    transporter: {
        isMidi: false,
    },
    band: {
        bass: {
            controller: {
                isMidi: false,
            },
            synthesizer: {
                isMidi: false,
            },
        },
        drum: {
            controller: {
                isMidi: false,
            },
            synthesizer: {
                isMidi: false,
            },
        },
        keys: {
            controller: {
                isMidi: false,
            },
            synthesizer: {
                isMidi: false,
            },
        },
        lead: {
            controller: {
                isMidi: false,
            },
            synthesizer: {
                isMidi: false,
            },
        },
    },
}

{
    showSourceCode: true,
    transporter: {
        isMidi: true,
        ports: {
            input: '%%TRANSPORTER_MIDI_INPUT%%',
            output: '%TRANSPORTER_%MIDI_OUTPUT%%',
        },
    },
    band: {
        bass: {
            controller: {
                isMidi: true,
                ports: {
                    input: '%%BASS_CONTROLLER_MIDI_INPUT%%',
                    output: '%%BASS_CONTROLLER_MIDI_OUTPUT%%',
                },
            },
            synthesizer: {
                isMidi: true,
                output: {
                    port: '%%BASS_SYNTHESIZER_MIDI_OUTPUT%%',
                    channel: '%%BASS_SYNTHESIZER_MIDI_CHANNEL%%',
                },
            },
        },
        drum: {
            controller: {
                isMidi: true,
                ports: {
                    input: '%%DRUM_CONTROLLER_MIDI_INPUT%%',
                    output: '%%DRUM_CONTROLLER_MIDI_OUTPUT%%',
                },
            },
            synthesizer: {
                isMidi: true,
                output: {
                    port: '%%DRUM_SYNTHESIZER_MIDI_OUTPUT%%',
                    channel: '%%DRUM_SYNTHESIZER_MIDI_CHANNEL%%',
                },
            },
        },
        keys: {
            controller: {
                isMidi: true,
                ports: {
                    input: '%%KEYS_CONTROLLER_MIDI_INPUT%%',
                    output: '%%KEYS_CONTROLLER_MIDI_OUTPUT%%',
                },
            },
            synthesizer: {
                isMidi: true,
                output: {
                    port: '%%KEYS_SYNTHESIZER_MIDI_OUTPUT%%',
                    channel: '%%KEYS_SYNTHESIZER_MIDI_CHANNEL%%',
                },
            },
        },
        lead: {
            controller: {
                isMidi: true,
                ports: {
                    input: '%%LEAD_CONTROLLER_MIDI_INPUT%%',
                    output: '%%LEAD_CONTROLLER_MIDI_OUTPUT%%',
                },
            },
            synthesizer: {
                isMidi: true,
                output: {
                    port: '%%LEAD_SYNTHESIZER_MIDI_OUTPUT%%',
                    channel: '%%LEAD_SYNTHESIZER_MIDI_CHANNEL%%',
                },
            },
        },
    },
}

--------------------------------------------------------------------------------------------------------

Things to implement in new build:
-Editable source code for the charts
-MIDI transporters and controllers
-Recording performances to a MIDI file: "%%CHART_NAME%%-%%TIMESTAMP%%.mid"
-Controllers having richer control creation
-Create toggle-able titles for config that are like checkboxes
-Replace MIDI config checkboxes and show-chart-source checkbox be toggle-able titles

--------------------------------------------------------------------------------------------------------

Evolution of the project:

2018-2019:
-Came up with idea for synth show
-Discovered Algorithmic Composition
-Didn't put them together yet
-Built synth case with MIDI file sequencer

2019-2022:
-Using 4 different raspberry pis all talking to each other over ethernet
-Each pi is a different part of the band
-They have to talk to each other to coordinate
-They use their GPIO pins for MIDI 5-pin DIN communication
-Was going to write it with Python

2022-2023:
-Wanted to make a way of running the show on a single computer
-Discovered Web MIDI API
-Learned web development
-Started building the project in vanilla javascript
-Wanted to be able to run with Web Audio using Tone.js
-Wanted to be able to connect to transporter and controller over WebRTC
-Although these ^ wouldn't be relevant for the final project, I just thought it would be really cool to do

2024-2025:
-Broke up with all packages, dependencies, and frameworks
-Rebuilt the project in vanilla javascript
-Just wanted to do it

--------------------------------------------------------------------------------------------------------

Refactor Ideas:
-Configs get stuff from the portions they config

--------------------------------------------------------------------------------------------------------

Every object in has the following:
-A way to test its portion of the config
    -This either passes and returns null or fails and throws an error
    -Any values that are valid are stored in the object
-A way to get the DOM element(s) for the portion of the config
    -The DOM element created is returned
-A way to get the config object for the portion of the config
    -The config object is returned
    -This should not be able to fail, as any invalid values should have been caught by the test